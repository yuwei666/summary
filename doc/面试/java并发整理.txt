线程状态
线程有六种状态，新建，可运行，阻塞，等待，有限期等待，终止。
1. 新建（New）：线程创建出来，还未启动时为NEW状态。
2. 可运行状态（Runnable）：线程调用了start方法后，就进入了RUNNABLE状态。RUNNABLE中有两个子状态，分别是READY、RUNNING。
2. 阻塞（BLOCKED）：一个阻塞状态线程等待进入同步代码块或者同步方法的监视器锁；在调用了Object#wait()之后重入同步代码块或者同步方法。
3. 等待状态（WAITING）：WAITING状态下不会分配CPU执行时间，直到被显示唤醒，线程状态由WAITING变为RUNNABLE然后继续执行。
4. 有限期等待（TIMED WAITING）：该状态下不会分配CPU执行时间，不过这种状态下不需要显示唤醒，到达超时期限会被JVM唤醒。
5. 终止（TERMINATED）：该线程执行完毕

Thread和Runnable
Thread和Runnable的实质是继承关系，没有可比性。无论使用哪种，都会new Thread，然后执行run方法。如果有复杂的线程操作需求，那可以选择Thread，如果是简单的任务，就用Runnable。

ThreadLocal
ThreadLocal是java提供的线程本地存储机制，利用该机制将数据存储到某个线程的内部
底层通过ThreadLocalMap来实现，每个线程中都维护了一个ThreadLocalMap对象，key是ThreadLocal对象，Value是需要存储的值
在线程池中使用ThreadLocal会造成内存泄漏，因为正常对象回收时会将Entry(key,value)回收，
但是线程池中的线程不会回收，线程又通过强引用指向ThreadLocalMap中的Entry，所以Entry对象也不会回收，解决办法是手动使用ThreadLocal的remove清除
ThreadLocal的经典使用场景是数据库连接管理

线程池创建
new ThreadPoolExecutor(corePoolSize, maximumPoolSize,keepAliveTime, milliseconds,runnableTaskQueue, threadFactory,handler)
Excutors.newFixedThreadPool(int nThreads)  固定大小的线程池
Excutors.newSingleThreadExecutor()		单个线程数的线程池，保证先进先出
Excutors.newCachedThreadPool()	创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程；
Executors.newScheduledThreadPool	可以执行延迟任务的线程池

为什么用线程池
提高线程利用率，提高响应速度，降低创建和销毁的消耗；提高可管理性，由线程池统一管理

线程池参数
corePoolSize 线程池中核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到线程数量=corePoolSize；
maxinumPoolSize 代表的是最大线程数，它与核心线程数相对应，表示最大允许被创建的线程数，比如当前任务较多，将核心线程数都用完了，还无法满足需求时，此时就会创建新的线程，但是线程池内线程总数不会超过最大线程数
keepAliveTime 当线程数大于核心时，这是多余的空闲线程在终止前等待新任务的最大时间
unit keepAliveTime参数的时间单位
workQueue 在执行任务之前用于保存任务的队列
threadFactory 创建线程的工厂，默认使用默认的线程工厂
handler 线程池的饱和策略，当阻塞队列满了，且没有空闲的线程，继续提交任务，必须采取一种策略处理该任务，默认是直接抛出异常

线程池底层工作原理
线程池内部是通过队列+线程实现的，当我们利用线程池执行任务时：
1. 如果此时线程池中的线程数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。
2. 如果此时线程池中的线程数量等于corePoolSize，但是缓冲队列workQueue未满，那么任务被放入缓冲队列。
3. 如果此时线程池中的线程数量大于等于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。
4. 如果此时线程池中的线程数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。
5. 当线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。

线程池中阻塞队列的作用
一般的队列只能保证作为一个有限长度的缓冲区，如果超出了缓冲长度，就无法保留当前的任务了，阻塞队列通过阻塞可以保留住当前想要继续入队的任务。
阻塞队列可以保证任务队列中没有任务时阻塞获取任务的线程，使得线程进入wait状态，释放cpu资源。
阻塞队列自带阻塞和唤醒的功能，不需要额外处理，无任务执行时,线程池利用阻塞队列的take方法挂起，从而维持核心线程的存活、不至于一直占用cpu资源

为什么是先添加列队而不是先创建最大线程
创建线程要获取全局锁，这时候其他（线程）就要阻塞，影响了整体效率

守护线程
待补充...

并发的三大特性
原子性
程序中最小操作单元，比如自增操作，本身并不是原子的，包括读取变量值，+1操作，写入内存。多线程中，可能一个线程没自增完，另一个就读取了值，就不是原子性
关键字：synchronized

可见性
当多个线程访问同一个变量时，一个线程修改了变量值，其他线程能够立即看到修改的值
关键字：volatile、synchronized、final

有序性
虚拟机在进行代码编译，虚拟机不一定按照我们写的代码顺序执行，可能进行重排序。虽然对变量值没影响，但是可能出现线程安全问题
关键字：volatile、synchronized

volatile关键字
保证被volatile修饰的共享变量对所有线程总是可见的，也就是当一个线程修改了被volatile修饰的共享变量的值，其他线程可以立即得知。
使用volatile关键字会强制将修改的值立即写入主存，其他线程的工作内存中的缓存无效，去主存中重新读取
volatile不是原子性操作，所以不能保证线程安全

Sychronized和ReentrantLock的区别
Sychronized是一个关键字，JVM层面的，ReentrantLock是个类，API层面的
Sychronized自动获取和释放锁，ReentrantLock需要手动获取释放
Sychronized是非公平锁，ReentrantLock可以选择公平锁和非公平锁
Sychronized锁的是对象，保存在对象头中；ReentrantLock通过state标识来标识锁的状态
Sychronized有锁升级的过程

Sychronized
提供了对对象或方法的原子性访问，即同一时刻只有一个线程访问该对象
Sychronized是基于对象头和Monitor监视器实现的
	对象头：java对象在内存中的存储结构包含对象头信息，每个对象都有固定格式的头，对象头包含Mark Word和类元数据指针，锁相关的信息就在Mark Word中，用两个标志位作为锁标识
	Monitor：java中每个对象都有一个监视器与之关联，Monitor内部维护了一个等待队列和同步队列。
		当一个线程尝试进入被Sychronized修饰的代码时，会尝试获取Monitor，如果Monitor没有被其他线程持有，那么就会获取锁进入临界区；否则将进入同步队列或阻塞等待状态
所以，实现原理就是通过更改对象头中的锁标志位，并配合Monitor监视器进行实现的

Sychronized的使用
普通同步方法，锁是当前对象实例；静态同步方法，锁是当前Class对象；同步代码块，锁是括号中的参数对象
java中每个对象都可以作为锁，这是synchronized实现的基础。当一个线程访问同步代码块时，必须先获得锁才能执行同步代码块中的代码，当退出或者抛出异常时，必须要释放锁。

Sychronized的锁升级
指的是使用Sychronized进行同步时，锁状态可能从低级别升级到高级别，以提高并发性能，JDK1.6版本开始实现的
偏向锁：当锁被第一次获取时，JVM会在对象头中记录线程id，之后这个线程再次获取时，可以直接操作
轻量锁：其他线程获取这个锁时，会升到到轻量锁，并尝试使用CAS自旋获取锁，
重量锁：CAS自选一定次数后，仍未获取到锁，则升级为重量锁。在这个阶段，线程进入阻塞状态

自旋锁
线程通过CAS获取预期的一个标记，如果没有获取到，则继续循环获取，如果获取到了则表示获取到了锁，这个过程线程一直在运行中，相对而言没有使用太多的操作系统资源，比较轻量。

ReentrantLock中的公平锁和非公平锁的底层实现
公平锁和非公平锁的底层实现，都会使用AQS的队列进行排队，区别在于：线程使用lock()加锁时，如果是公平锁，会先检查AQS队列中是否存在线程在排队，如果有，那么当前线程也会进行排队；
如果是非公平锁，则不会排队，直接竞争锁。
不管是公平锁还是非公平锁，一旦没有竞争到锁，都会进行排队，当锁释放时，都是唤醒最前面的线程，所以非公平锁只体现在线程加锁阶段，而没有提现到唤醒阶段。
另外，ReentrantLock是可重入锁，不管是公平锁还是非公平锁都是可重入的。

ReentrantLock中tryLock()和lock()的区别
tryLock()表示尝试加锁，可能加不到，该方法不会阻塞线程，加到锁返回true，没加到返回false；lock()表示阻塞加锁，线程会阻塞直到加到锁，方法没有返回值

AQS
AQS是一个JAVA线程同步的框架，是JDK中很多锁工具的核心实现框架
在AQS中，维护了一个信号state和一个线程组成的双向链表队列。队列用来先线程排队，state用来控制线程排队或者放行。在不同的场景中有不同的意义。

AQS如何实现可重入锁
在可重入锁场景中，state用来标识加锁的次数。0代表无锁，每加一次锁state+1，释放锁state-1。

如何设计一个高并发的系统
1.数据库的独写分离，分库分表
2.微服务拆分
3.缓存策略，使用redis做缓存
4.限流降级熔断策略
5.负载均衡，消息队列




